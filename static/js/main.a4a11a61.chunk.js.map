{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rows","columns","qualities","data","updateRows","bind","assertThisInitialized","updateColumns","getChords","updateQualities","event","target","value","setState","console","log","checked","response","push","remove","filter","x","previousRoot","roots","getRandomItem","arr","Math","floor","random","length","answerArr","i","newRoot","rootsWithoutDupes","indexOf","react_default","a","createElement","id","className","type","min","max","onChange","onClick","App_Data","Component","Data","map","styles","display","gridTemplateColumns","gridTemplateRows","style","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4a11a61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: 10,\n      columns: 10,\n      qualities: [],\n      data: []\n\n    }\n    this.updateRows=this.updateRows.bind(this);\n    this.updateColumns=this.updateColumns.bind(this);\n    this.getChords=this.getChords.bind(this);\n    this.updateQualities=this.updateQualities.bind(this);\n  }\n  updateRows(event) {\n    let rows = event.target.value;\n    if (rows > 99) {rows = 99}\n    this.setState({rows: rows})\n    console.log(this.state);\n  }\n  updateColumns(event) {\n    let columns = event.target.value;\n    if (columns > 99) {columns = 99}\n    this.setState({columns: columns});\n    console.log(this.state);\n  }\n  updateQualities(event) {\n    if (event.target.checked == true) {\n      let response = this.state.qualities;\n      response.push(event.target.value);\n      this.setState({qualities: response})\n    }else{\n      let remove = this.state.qualities.filter(x => x != event.target.value);\n      console.log(remove);\n      this.setState({qualities: remove})\n    }\n    console.log(this.state.qualities)\n  }\n  getChords() {\n    const roots = ['A','A','A','B','B','B','C','C','C','D','D','D','E','E','E','F','F','F','G','G','G','A#','Bb','Bb','C#','Db','Db','D#','Eb','Eb','F#','F#','Gb','G#','Ab','Ab'];\n    const qualities = ['maj', 'min']\n    const getRandomItem = (arr) => {\n      const value = arr[Math.floor(Math.random()*arr.length)];\n      return (value ? value : '');\n    }\n    let previousRoot;\n    let answerArr = [];\n    for (var i=0; i< this.state.rows*this.state.columns; i++) {\n      let newRoot = getRandomItem(roots);\n      if (previousRoot == newRoot) {\n        const rootsWithoutDupes = [\"C\",\"Db\",\"D\",\"Eb\",\"E\",\"F\",\"Gb\",\"G\",\"Ab\",\"A\",\"Bb\",\"B\",\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"];\n        newRoot = rootsWithoutDupes[rootsWithoutDupes.indexOf(newRoot) + 1]\n      }\n      answerArr.push(newRoot + getRandomItem(this.state.qualities));\n      previousRoot = newRoot;\n    }\n    this.setState({\n      data: answerArr\n    })\n  }\n  render() {\n    return (\n      <main>\n        <h1>Random Chord Generator</h1>\n        <div id=\"rows\">\n          <label> rows<input className=\"rows-cols\" type='number' value={this.state.rows} min={1} max={99} onChange={this.updateRows} /></label>\n        </div>\n        <div id=\"columns\">\n          <label> columns<input className=\"rows-cols\" type='number' value={this.state.columns} min={1} max={99} onChange={this.updateColumns} /></label>\n        </div>\n        <form>\n          <label> maj<input type=\"checkbox\" value=\"maj\" onChange={this.updateQualities} /></label>\n          <label> min<input type=\"checkbox\" value=\"min\" onChange={this.updateQualities}/></label>\n          <label> dim<input type=\"checkbox\" value=\"dim\" onChange={this.updateQualities}/></label>\n          <label> aug<input type=\"checkbox\" value=\"aug\" onChange={this.updateQualities}/></label>\n          <label> min7<input type=\"checkbox\" value=\"min7\" onChange={this.updateQualities}/></label>\n          <label> maj7<input type=\"checkbox\" value=\"maj7\" onChange={this.updateQualities}/></label>\n          <label> min7b5<input type=\"checkbox\" value=\"min7b5\" onChange={this.updateQualities}/></label>\n          <label> 7<input type=\"checkbox\" value='7' onChange={this.updateQualities}/></label>\n        </form>\n        <button type='button' onClick={this.getChords}>Get New Chords!</button>\n        <Data data={this.state.data} rows={this.state.rows} columns={this.state.columns}/>\n      </main>\n\n      )\n  }\n}\n\nclass Data extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const data = this.props.data.map(x => <div>{x}</div>);\n    const styles = {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(' + this.props.columns + ', 75px)',\n      gridTemplateRows: 'repeat(' + this.props.rows + ', 20px)'\n    }\n    return (\n      <div id=\"data\" style={styles}>\n        {data}\n      </div>\n      )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}